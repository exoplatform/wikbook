This chapter focuses on the integration of the documentation with the project it documents.

= Java^^tm^^ code embedding =

Wikbook allows to embbed Java^^tm^^ source code inside the documentation. It is very powerful when it comes
to explain a tutorial or to explain an API.

todo

= Maven integration =

The Maven Wikbook plugin converts wiki document to a Docbook document. In order to produce final consumable documents
(PDF, HTML), the Docbook document must be converted to new documents, this process is usually done via an XSL stylesheet
that takes the Docbook document and transforms it.

== The Maven Wikbook plugin ==

The Maven Wikbook plugin focus on transforming the Wiki content into a compliant DocBook XML document.

{{example title="Example of Wikbook Maven plugin"}}
{{xml indent=2}}
<plugin>
 <groupId>org.wikbook</groupId>
 <artifactId>wikbook.maven</artifactId>
 <executions>
   <execution>
     <phase>prepare-package</phase>
     <goals>
       <goal>transform</goal>
     </goals>
   </execution>
 </executions>
 <configuration>
   <sourceDirectory>${pom.basedir}/src/main/wikbook/en/en-US</sourceDirectory>
   <sourceFileName>book.wiki</sourceFileName>
   <destinationDirectory>${project.build.directory}/wikbook/src</destinationDirectory>
   <destinationFileName>index.xml</destinationFileName>
   <emitDoctype>false</emitDoctype>
   <format>book</format>
 </configuration>
</plugin>
{{/xml}}
{{/example}}

=== Source directory ===

Specify the source directory where to find the wiki files:

{{example}}
{{xml}}
<configuration>
   ...
   <sourceDirectory>${pom.basedir}/src/main/wikbook/en/en-US</sourceDirectory>
   ...
</configuration>
{{/xml}}
{{/example}}

=== Extra source directory ===

Like source directory but an extra one:

{{example}}
{{xml}}
<configuration>
   ...
   <extraSourceDirectory>${pom.basedir}/src/main/extra/en/en-US</extraSourceDirectory>
   ...
</configuration>
{{/xml}}
{{/example}}

=== Source file name ===

Specify the file name of the root wiki file of the source to transform:

{{example}}
{{xml}}
<configuration>
   ...
   <sourceFileName>book.wiki</sourceFileName>
   ...
</configuration>
{{/xml}}
{{/example}}

=== Destination directory ===

Specify the destination directory where Wikbook will create the corresponding Docbook XML:

{{example}}
{{xml}}
<configuration>
   ...
   <destinationDirectory>${project.build.directory}/wikbook/src</destinationDirectory>
   ...
</configuration>
{{/xml}}
{{/example}}

=== Destination file name ===

Specify the file name of the produced Docbook XML document:

{{example}}
{{xml}}
<configuration>
   ...
   <destinationFileName>book.wiki</destinationFileName>
   ...
</configuration>
{{/xml}}
{{/example}}

=== Emit doctype ===

Emit or not the doctype of the Docbook XML document, the default value is ##true##:

{{example}}
{{xml}}
<configuration>
   ...
   <emitDocType>false</emitDocType>
   ...
</configuration>
{{/xml}}
{{/example}}

=== Validation mode ===

Controls how Wikbook reacts when a parse error is found, the possible values are

* ##lax## : The Maven plugin does not fail
* ##strict## : The maven plugin makes the build fail

The default value is ##lax##.

{{example}}
{{xml}}
<configuration>
   ...
   <validationMode>strict</validationMode>
   ...
</configuration>
{{/xml}}
{{/example}}

=== Before book body  XML ===

A literal declaration of XML prepended to the book body, useful to include a cover page for instance:

{{example}}
{{xml}}
<configuration>
   ...
   <beforeBookBodyXML><![CDATA[<xi:include href="bookinfo.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />]]></beforeBookBodyXML>
   ...
</configuration>
{{/xml}}
{{/example}}

{{note}}The XML should be escape with CDATA to avoid confusion with the Maven pom XML file.{{/note}}

=== After book body  XML ===

A literal declaration of XML appended to the book body:

{{example}}
{{xml}}
<configuration>
   ...
   <afterBookBodyXML>...></afterBookBodyXML>
   ...
</configuration>
{{/xml}}
{{/example}}

=== Syntax identifier ===

Specify the syntax of the root file as Wikbook cannot guess it. When it is not specified, the //xwiki// syntax
is used.

{{example}}
{{xml}}
<configuration>
   ...
   <syntaxId>confluence</syntaxId>
   ...
</configuration>
{{/xml}}
{{/example}}

=== Charset configuration ===

The charset configuration is used when loading the wiki files, the charset must be a charset recognized by the Java
Virtual Machine executing the plugin.

{{example}}
{{xml}}
<configuration>
   ...
   <charset>UTF-8</charset>
   ...
</configuration>
{{/xml}}
{{/example}}

=== Output format ===

By default, the plugin will produce a Docbook book element. It can be changed to output the first chapter
of a book. This is useful when working with composite books that are merged via XML inclusion:

{{example}}
{{xml}}
<configuration>
   ...
   <format>chapter</format>
   ...
</configuration>
{{/xml}}
{{/example}}

==== Book identifier ====

The book identifier configuration is used to define the identifier of a book and produce docbook XML. For instance
the plugin configuration:

{{example}}
{{xml}}
<configuration>
   ...
   <bookId>foo</bookId>
   ...
</configuration>
{{/xml}}
{{/example}}

Will produce the following Docbook for the book:

{{xml}}
<book id="foo">...</book>
{{/xml}}

Such identifier is used by Docbook to name the files produced by the transformation, in that case the file corresponding
to the book itself.

== The Maven transformation plugins ==

A transformation plugin plays an important role in the documentation generation because it takes the docbook generated
 by wikbook and transforms it into the real documentation. There are at least two plugins that provides this functionnality:

* The [[Docbkx Tools>>http://code.google.com/p/docbkx-tools/]] project: it contains a plugin that is actually used
by the Wikbook archetype.
* The [[Maven jDocBook Plugin>>http://www.jboss.org/maven-jdocbook-plugin/]] project.

Configuration of these plugins is not covered in this guide, however each of them contain a fairly good documentation,
both are comparable in term of feature and can generate the main formats like HTML or PDF.

== The Maven Wikbook archetype ==

The Wikbook archetype creates a Wikbook module that contains a basic documentation and its POM contains the plugin
configuration to generate HTML and PDF formats. Its usage is very simple:

{{example title="Wikbook archetype usage"}}
{{screen}}
>mvn archetype:generate \
  -DarchetypeGroupId=org.wikbook \
  -DarchetypeArtifactId=wikbook.archetype \
  -DarchetypeVersion=$[wikbook.version] \
  -DgroupId=<my.groupid> \
  -DartifactId=<my-artifactId>
{{/screen}}
{{/example}}

After that, it is ready to be used and tweaked.

== Integration of code block citation {{anchor id=maven_code_citation_section/}} ==

We have covered how code can be cited in the [[#java_code_citation_section]] and the [[#xml_code_inclusion_section]].
Inside a Maven project, the Wikbook plugin requires access to the dependencies containing the code, source and binaries.

=== Producing the source dependencies ===

By default Maven does not create source code artifacts, however the //maven-source-plugin// does. Here is an example
of the plugin configuration that can be added to a project to activate the generation of the source code artifact
along with the compiled code artifact:

{{example title="Configuration of the maven-source-plugin"}}
{{xml indent=2}}
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-source-plugin</artifactId>
<executions>
<execution>
<id>attach-sources</id>
<goals>
<goal>jar-no-fork</goal>
</goals>
</execution>
</executions>
</plugin>
{{/xml}}
{{/example}}

=== Declaring the right dependency ===

The source code artifact needs to be declared as a dependency of the Maven module processing the Wikbook document:

{{example title="Declaring the right dependency"}}
{{xml indent=2}}
<!-- Declares a dependency on the code -->
<dependency>
<groupId>groupId</groupId>
<artifactId>artifactId</artifactId>
<version>1.0-SNAPSHOT</version>
</dependency>
<!-- Declares a dependency on the source code -->
<dependency>
<groupId>groupId</groupId>
<artifactId>artifactId</artifactId>
<version>1.0-SNAPSHOT</version>
<classifier>sources</classifier>
</dependency>
{{/xml}}
{{/example}}